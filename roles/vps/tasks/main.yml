---
- name: Create systemd-resolved configuration directory
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    mode: "0755"
  become: true

- name: Configure per-domain DNS server for self-hosted services
  ansible.builtin.copy:
    dest: /etc/systemd/resolved.conf.d/10-selfhosted.conf
    content: |
      [Resolve]
      DNS={{ DNS_HOST }}
      Domains=~{{ DNS_DOMAIN }}
    mode: "0644"
  become: true

- name: Restart systemd-resolved
  ansible.builtin.systemd:
    name: systemd-resolved
    state: restarted
  become: true

- name: Link resolv.conf to systemd-resolved
  ansible.builtin.file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
  become: true

- name: Run apt update
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Install required packages
  ansible.builtin.apt:
    name:
      - nginx
      - fail2ban
      - wireguard
    state: present
  when: ansible_os_family == "Debian"
  become: true

- name: Install/upgrade Docker
  ansible.builtin.apt:
    name: docker.io
    state: latest
    update_cache: true
  notify: Restart Docker
  become: true  

- name: Ensure existence of directory  /etc/letsencrypt/live/{{ DNS_DOMAIN }}
  ansible.builtin.file:
    path: /etc/letsencrypt/live/{{ DNS_DOMAIN }}
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Ensure existence of directory /etc/letsencrypt/archive/{{ DNS_DOMAIN }}
  ansible.builtin.file:
    path: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Copy cert files to target
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ DNS_DOMAIN }}/{{ item.src }}"
    dest: "/etc/letsencrypt/archive/{{ DNS_DOMAIN }}/{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: root
  loop:
    - { src: "cert.pem", dest: "cert.pem", mode: "0644" }
    - { src: "chain.pem", dest: "chain.pem", mode: "0644" }
    - { src: "fullchain.pem", dest: "fullchain.pem", mode: "0644" }
    - { src: "privkey.pem", dest: "privkey.pem", mode: "0600" }
  become: true
  notify: Restart Nginx

- name: Ensure symlinks are set for /etc/letsencrypt/live/{{ DNS_DOMAIN }}
  ansible.builtin.file:
    src: "/etc/letsencrypt/archive/{{ DNS_DOMAIN }}/{{ item.src }}"
    dest: "/etc/letsencrypt/live/{{ DNS_DOMAIN }}/{{ item.dest }}"
    state: link
    owner: root
    group: root
  loop:
    - { src: "cert.pem", dest: "cert.pem" }
    - { src: "chain.pem", dest: "chain.pem" }
    - { src: "fullchain.pem", dest: "fullchain.pem" }
    - { src: "privkey.pem", dest: "privkey.pem" }
  become: true
  notify: Restart Nginx

- name: Ensure /etc/nginx/ssl directory exists
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: "0700"
  become: true

- name: Generate strong DH parameters
  ansible.builtin.command:
    cmd: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
    creates: /etc/nginx/ssl/dhparam.pem
  become: true

- name: Update Nginx configuration using template
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  become: true
  notify: Restart Nginx

- name: Deploy WireGuard Configuration
  ansible.builtin.template:
    src: wireguard.conf.j2
    dest: /etc/wireguard/wg0.conf
  notify:
    - Restart WireGuard
  become: true

- name: Enable and Start WireGuard
  ansible.builtin.systemd:
    name: wg-quick@wg0
    state: started
    enabled: true
    daemon_reload: true
  become: true

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true
  become: true

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  become: true
  when: ansible_os_family == "Debian"

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true

- name: Make APT stop/start Docker around docker.io upgrades
  ansible.builtin.copy:
    dest: /etc/apt/apt.conf.d/99docker-restart
    mode: "0644"
    owner: root
    group: root
    content: |
      // stop Docker before unpacking/configuring docker.io
      DPkg::Pre-Invoke {
        "if [ \"$DPKG_MAINTSCRIPT_PACKAGE\" = \"docker.io\" ]; then systemctl stop docker; fi";
      };
      // start Docker after finishing up
      DPkg::Post-Invoke {
        "if [ \"$DPKG_MAINTSCRIPT_PACKAGE\" = \"docker.io\" ]; then systemctl start docker; fi";
      };
  become: true

- name: Set docker socket permissions
  ansible.builtin.file:
    path: /var/run/docker.sock
    group: docker
    mode: "0660"
  become: true

- name: Ensure Uptime Kuma Docker container is running
  community.docker.docker_container:
    name: upremote
    image: louislam/uptime-kuma:1
    ports:
      - "3001:3001"
    restart_policy: always
  notify: Restart Uptime Kuma Container

- name: Place Nginx config for services
  ansible.builtin.template:
    src: "{{ item }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item }}.conf"
  loop:
    - redirect
    - upremote
  become: true
  notify: Restart Nginx

- name: Symlink Nginx config to sites-enabled for services
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item }}.conf"
    state: link
  loop:
    - redirect
    - upremote
  become: true
  notify: Restart Nginx

- name: Ensure default site is not enabled
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: true
  notify: Restart Nginx

- name: Ensure Nginx is running and enabled at boot
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true
  become: true

- name: Set up cron job for system package updates
  ansible.builtin.cron:
    name: "System Package Updates"
    hour: "4"
    minute: "0"
    job: "apt-get update && apt-get upgrade -y"
  become: true
