---
- name: Set DNS server for systemd-resolved
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "^#?DNS="
    line: "DNS={{ DNS_HOST }}"
    state: present
  become: true

- name: Restart systemd-resolved
  ansible.builtin.systemd:
    name: systemd-resolved
    state: restarted
  become: true

- name: Link resolv.conf to systemd-resolved
  ansible.builtin.file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
  become: true

- name: Install required packages
  ansible.builtin.apt:
    name:
      - nfs-common
      - docker.io
      - docker-compose
      - nginx
      - ufw
      - certbot
      - python3-certbot-nginx
      - python3-certbot-dns-cloudflare
    state: present
  when: ansible_os_family == "Debian"
  become: true

- name: Check if wireguard route exists
  ansible.builtin.command: >
    ip route show {{ WG_NETWORK }}
    via {{ VPN_HOST }} dev ens18 proto static
  register: route_check
  ignore_errors: true
  changed_when: false
  failed_when: false
  become: true

- name: Add route to wireguard network if not present
  ansible.builtin.command: >
    ip route add {{ WG_NETWORK }}
    via {{ VPN_HOST }} dev ens18 proto static onlink
  when: route_check.rc != 0
  changed_when: route_check.rc != 0
  become: true

- name: Check if NFS directories exist
  ansible.builtin.stat:
    path: "{{ item.dest }}"
  register: dir_status
  loop: "{{ NFS_MOUNTS }}"

- name: Create required NFS directories if they don't exist
  ansible.builtin.file:
    path: "{{ item.item }}"
    state: directory
    mode: "0755"
  loop: "{{ dir_status.results }}"
  when: not item.stat.exists
  become: true

- name: Add NFS mounts to /etc/fstab
  ansible.builtin.blockinfile:
    path: /etc/fstab
    block: |
      {% for MOUNT in NFS_MOUNTS %}
      {{ NFS_SERVER }}:{{ MOUNT.source }} {{ MOUNT.dest }} nfs {{ MOUNT.options }} 0 0
      {% endfor %}
  become: true

- name: Ensure NFS shares are mounted (and retry on DNS hiccup)
  block:
    - name: "Mount NFS share {{ item.source ~ ' → ' ~ item.dest }}"
      ansible.posix.mount:
        path: "{{ item.dest }}"
        src: "{{ NFS_SERVER }}:{{ item.source }}"
        fstype: nfs
        opts: "{{ item.options | default('defaults') }}"
        state: mounted
      become: true
      loop: "{{ NFS_MOUNTS }}"
      register: mount_results

  rescue:
    - name: DNS lookup failed – restart systemd-resolved
      ansible.builtin.systemd:
        name: systemd-resolved.service
        state: restarted
      become: true

    - name: Retry mounting NFS shares after DNS restart
      ansible.posix.mount:
        path: "{{ item.dest }}"
        src: "{{ NFS_SERVER }}:{{ item.source }}"
        fstype: nfs
        opts: "{{ item.options | default('defaults') }}"
        state: mounted
      become: true
      loop: "{{ NFS_MOUNTS }}"
      register: mount_retry
      failed_when: mount_retry.failed

- name: Configure persistent route in netplan
  when: ansible_os_family == "Debian"
  block:
    - name: Ensure netplan configuration directory exists
      ansible.builtin.file:
        path: /etc/netplan
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Add persistent route to netplan configuration
      ansible.builtin.copy:
        dest: /etc/netplan/01-netcfg.yaml
        content: |
          network:
            version: 2
            ethernets:
              ens18:
                dhcp4: yes
                routes:
                  - to: "{{ WG_NETWORK }}"
                    via: "{{ VPN_HOST }}"
        owner: root
        group: root
        mode: "0644"
      notify: Apply netplan configuration
      become: true

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  become: true
  when: ansible_os_family == "Debian"

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true

- name: Set docker socket permissions
  ansible.builtin.file:
    path: /var/run/docker.sock
    group: docker
    mode: "0660"
  become: true

- name: Ensure Uptime Kuma Docker container is running
  community.docker.docker_container:
    name: uplocal
    image: louislam/uptime-kuma:1
    volumes:
      - "{{ CFG_MOUNT }}/uplocal-cfg/:/app/data/"
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3001:3001"
    dns_servers:
      - "{{ DNS_HOST }}"
      - "{{ DNS_HOST_IPV6 }}"
    restart_policy: always
  notify: Restart Uptime Kuma Container

- name: Ensure Jellyfin Docker container is running
  community.docker.docker_container:
    name: jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    env:
      PUID: "{{ UID | string }}"
      PGID: "{{ GID | string }}"
      TZ: "{{ TIME_ZONE }}"
    volumes:
      - "{{ PLEX_MOUNT_1 }}"
      - "{{ PLEX_MOUNT_2 }}"
      - "{{ PLEX_MOUNT_3 }}"
      - "{{ PLEX_MOUNT_4 }}"
      - "{{ CFG_MOUNT }}/jellyfin-cfg:/config"
    ports:
      - "8096:8096"
      - "8920:8920"
      - "7359:7359/udp"
      - "1900:1900/udp"
    restart_policy: always
  notify: Restart Jellyfin Container

- name: Ensure Ntfy Docker container is running
  community.docker.docker_container:
    name: ntfy
    image: binwiederhier/ntfy:latest
    command:
      - serve
    env:
      TZ: "{{ TIME_ZONE }}"
    volumes:
      - "{{ CFG_MOUNT }}/ntfy-cfg/:/etc/ntfy"
      - "{{ CFG_MOUNT }}/ntfy-db/:/var/lib/ntfy"
    ports:
      - "9091:80"
    restart_policy: always
  notify: Restart Ntfy Container

- name: Ensure Vaultwarden Docker container is running
  community.docker.docker_container:
    name: vaultwarden
    image: vaultwarden/server:latest
    user: "{{ UID | string }}:{{ GID | string }}"
    env:
      TZ: "{{ TIME_ZONE }}"
      WEBSOCKET_ENABLED: "true"
      SHOW_PASSWORD_HINT: "false"
      SIGNUPS_ALLOWED: "false"
    volumes:
      - "{{ CFG_MOUNT }}/vaultwarden-cfg/:/data/"
    ports:
      - "8080:80"
    restart_policy: always
  notify: Restart Vaultwarden Container

- name: Ensure Watchtower Docker container is running
  community.docker.docker_container:
    name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: --cleanup
    restart_policy: always
  notify: Restart Watchtower Container

- name: Allow SSH access through UFW
  community.general.ufw:
    rule: allow
    name: OpenSSH
  become: true

- name: Allow traffic on port 80 for Nginx
  community.general.ufw:
    rule: allow
    port: "80"
    proto: tcp
  become: true

- name: Allow traffic on port 443 for Nginx
  community.general.ufw:
    rule: allow
    port: "443"
    proto: tcp
  become: true

- name: Enable ufw
  community.general.ufw:
    state: enabled
  become: true

- name: Create Cloudflare credentials file for Certbot
  ansible.builtin.copy:
    dest: "/etc/letsencrypt/cloudflare.ini"
    content: |
      dns_cloudflare_api_token = {{ CLOUDFLARE_API_TOKEN }}
    mode: "0600"
    owner: "root"
    group: "root"
  become: true
  when: ansible_os_family == "Debian"

- name: Obtain or renew wildcard SSL certificates from Let's Encrypt using Cloudflare
  ansible.builtin.command:
    cmd: >
      certbot certonly --agree-tos --non-interactive  --email {{ LETSENCRYPT_EMAIL }}
      --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
      -d {{ DNS_DOMAIN }} -d *.{{ DNS_DOMAIN }}
      --keep-until-expiring
  become: true
  when: ansible_os_family == "Debian"
  register: certbot_output
  changed_when: "'Congratulations' in certbot_output.stdout"

- name: Get stat of remote file
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ DNS_DOMAIN }}/fullchain.pem
  register: cert_stat
  become: true

- name: Get stat of local file
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ DNS_DOMAIN }}/fullchain.pem
  register: local_cert_stat
  delegate_to: localhost
  become: true
  ignore_errors: true

- when: (not local_cert_stat.stat.exists) or (cert_stat.stat.exists and cert_stat.stat.mtime > local_cert_stat.stat.mtime)

  block:
    - name: Ensure the destination directory exists on local Ansible controller
      ansible.builtin.file:
        path: /etc/letsencrypt/live/{{ DNS_DOMAIN }}
        state: directory
        mode: "0755"
        owner: "root"
        group: "root"
      delegate_to: localhost
      become: true

    - name: Synchronize SSL certs from remote to Ansible controller
      ansible.posix.synchronize:
        src: /etc/letsencrypt/live/{{ DNS_DOMAIN }}/
        dest: /etc/letsencrypt/live/{{ DNS_DOMAIN }}/
        mode: pull
        rsync_opts:
          - "--copy-links"
      become: true
      notify: Restart Nginx

- name: Prune old cert versions in the archive, keep only current + 2
  ansible.builtin.shell: |
    set -o pipefail
    # collect any files beyond the newest 2 per type
    files_to_remove=$(
      for type in cert chain fullchain privkey; do
        ls -1t /etc/letsencrypt/archive/{{ DNS_DOMAIN }}/${type}*.pem \
          | tail -n +4
      done
    )
    # only delete if there is something to delete
    if [ -n "$files_to_remove" ]; then
      echo "$files_to_remove" | xargs -r rm -f
    fi
  args:
    executable: /bin/bash
  register: prune_old_certs
  changed_when: prune_old_certs.stdout != ""
  become: true
  when: ansible_os_family == "Debian"

- name: Ensure /etc/nginx/ssl directory exists
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: "0700"
  become: true

- name: Generate strong DH parameters
  ansible.builtin.command:
    cmd: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
    creates: /etc/nginx/ssl/dhparam.pem
  become: true

- name: Update Nginx configuration using template
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  become: true
  notify: Restart Nginx

- name: Place Nginx config for services
  ansible.builtin.template:
    src: "{{ item }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item }}.conf"
  loop:
    - uplocal
    - vaultwarden
    - jellyfin
    - chat
    - drive
    - file
    - amp
    - ntfy
  become: true
  notify: Restart Nginx

- name: Symlink Nginx config to sites-enabled for services
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item }}.conf"
    state: link
  loop:
    - uplocal
    - vaultwarden
    - jellyfin
    - chat
    - drive
    - file
    - amp
    - ntfy
  become: true
  notify: Restart Nginx

- name: Ensure default site is not enabled
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: true
  notify: Restart Nginx

- name: Ensure Nginx is running and enabled at boot
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true
  become: true

- name: Set up cron job for cert renewal
  ansible.builtin.cron:
    name: "Certbot Renewal"
    hour: "2"
    minute: "30"
    job: "certbot renew --quiet --post-hook 'systemctl reload nginx'"
  become: true

- name: Set up cron job for system package updates
  ansible.builtin.cron:
    name: "System Package Updates"
    hour: "4"
    minute: "0"
    job: "apt-get update && apt-get upgrade -y"
  become: true
