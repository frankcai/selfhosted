---
- name: Install required packages
  apt:
    name:
      - nfs-common
      - docker.io
      - docker-compose
      - nginx
      - ufw
      - certbot
      - python3-certbot-nginx
      - python3-certbot-dns-cloudflare
    state: present
  when: ansible_os_family == "Debian"
  become: yes

- name: Check if NFS directories exist
  stat:
    path: "{{ item.dest }}"
  register: dir_status
  loop: "{{ NFS_MOUNTS }}"
    
- name: Create required NFS directories if they don't exist
  file:
    path: "{{ item.item }}"
    state: directory
    mode: '0755'
  loop: "{{ dir_status.results }}"
  when: item.stat.exists == false
  become: yes
  
- name: Add NFS mounts to /etc/fstab
  blockinfile:
    path: /etc/fstab
    block: |
      {% for MOUNT in NFS_MOUNTS %}
      {{ NFS_SERVER }}:{{ MOUNT.source }} {{ MOUNT.dest }} nfs {{ MOUNT.options }} 0 0
      {% endfor %}
  become: yes

- name: Test NFS mounts block
  block:
    - name: Test NFS mounts
      command:
        cmd: mount -a
      become: yes
      register: mount_test
      failed_when: mount_test.rc != 0
  rescue:
    - name: Refresh DNS by restarting systemd-resolved service on failure
      become: yes
      ansible.builtin.systemd:
        name: systemd-resolved.service
        state: restarted

    - name: Retry Test NFS mounts after refreshing DNS
      command:
        cmd: mount -a
      become: yes
      register: mount_retry
      failed_when: mount_retry.rc != 0

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  become: yes
  when: ansible_os_family == "Debian"

- name: Ensure Docker service is started and enabled
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Set docker socket permissions
  file:
    path: /var/run/docker.sock
    group: docker
    mode: '0660'
  become: yes

- name: Ensure Uptime Kuma Docker container is running
  docker_container:
    name: uplocal
    image: louislam/uptime-kuma:1
    volumes:
      - "{{ CFG_MOUNT }}/uplocal-cfg/:/app/data/"
    ports:
      - "3001:3001"
    restart_policy: always
  notify: Restart Uptime Kuma Container

- name: Ensure Plex Docker container is running
  docker_container:
    name: plex
    image: linuxserver/plex:latest
    env:
      PUID: "{{ UID | string }}"
      PGID: "{{ GID | string }}"
      TZ: "{{ TIME_ZONE }}"
    volumes:
      - "{{ PLEX_MOUNT_1 }}"
      - "{{ PLEX_MOUNT_2 }}"
      - "{{ PLEX_MOUNT_3 }}"
      - "{{ PLEX_MOUNT_4 }}"
      - "{{ CFG_MOUNT }}/plex-cfg:/config"
    ports:
      - "32400:32400"
    restart_policy: always
  notify: Restart Plex Container

- name: Ensure Jellyfin Docker container is running
  docker_container:
    name: jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    env:
      PUID: "{{ UID | string }}"
      PGID: "{{ GID | string }}"
      TZ: "{{ TIME_ZONE }}"
    volumes:
      - "{{ PLEX_MOUNT_1 }}"
      - "{{ PLEX_MOUNT_2 }}"
      - "{{ PLEX_MOUNT_3 }}"
      - "{{ PLEX_MOUNT_4 }}"
      - "{{ CFG_MOUNT }}/jellyfin-cfg:/config"
    ports:
      - "8096:8096"
      - "8920:8920"
      - "7359:7359/udp"
      - "1900:1900/udp"   
    restart_policy: always
  notify: Restart Jellyfin Container

- name: Ensure Vaultwarden Docker container is running
  docker_container:
    name: vaultwarden
    image: vaultwarden/server:latest
    user: "{{ UID | string }}:{{ GID | string }}"
    env:
      TZ: "{{ TIME_ZONE }}"
      WEBSOCKET_ENABLED: "true"
      SHOW_PASSWORD_HINT: "false"
      SIGNUPS_ALLOWED: "false" 
    volumes:
      - "{{ CFG_MOUNT }}/vaultwarden-cfg/:/data/"
    ports:
      - "8080:80"
    restart_policy: always
  notify: Restart Vaultwarden Container

- name: Ensure ChatGPT Next Web Docker container is running
  docker_container:
    name: chatgpt-next-web
    image: yidadaa/chatgpt-next-web
    env:
      OPENAI_API_KEY: "{{ ASK_OPENAI_API_KEY }}"
      CODE: "{{ ASK_CODE }}"
      HIDE_USER_API_KEY: "1"
      ENABLE_BALANCE_QUERY: "1"
    ports:
      - "3000:3000"
    restart_policy: always

- name: Ensure Watchtower Docker container is running
  docker_container:
    name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"    
    command: --cleanup           
    restart_policy: always
  notify: Restart Watchtower Container  

- name: Allow SSH access through UFW
  ufw:
    rule: allow
    name: OpenSSH
  become: yes

- name: Allow traffic on port 80 for Nginx
  ufw:
    rule: allow
    port: '80'
    proto: tcp
  become: yes

- name: Allow traffic on port 443 for Nginx
  ufw:
    rule: allow
    port: '443'
    proto: tcp
  become: yes

- name: Enable ufw
  ufw:
    state: enabled
  become: yes

- name: Create Cloudflare credentials file for Certbot
  copy:
    dest: "/etc/letsencrypt/cloudflare.ini"
    content: |
      dns_cloudflare_api_token = {{ CLOUDFLARE_API_TOKEN }}
    mode: '0600'
    owner: 'root'
    group: 'root'
  become: yes
  when: ansible_os_family == "Debian"

- name: Obtain or renew wildcard SSL certificates from Let's Encrypt using Cloudflare
  command:
    cmd: >
      certbot certonly --agree-tos --non-interactive 
      --email {{ LETSENCRYPT_EMAIL }}
      --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
      -d {{ DNS_DOMAIN }} -d *.{{ DNS_DOMAIN }}
      --keep-until-expiring
  become: yes
  when: ansible_os_family == "Debian"
  register: certbot_output
  changed_when: "'Congratulations' in certbot_output.stdout"

- name: Get stat of remote file
  stat:
    path: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}/fullchain1.pem
  register: cert_stat
  become: yes

- name: Get stat of local file
  stat:
    path: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}/fullchain1.pem
  register: local_cert_stat
  delegate_to: localhost
  become: yes
  ignore_errors: yes

- block:
  - name: Ensure the destination directory exists on local Ansible controller
    file:
      path: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}
      state: directory
      mode: '0755'
      owner: 'root'
      group: 'root'
    delegate_to: localhost
    become: yes 

  - name: Synchronize SSL certs from remote to Ansible controller
    synchronize:
      src: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}/
      dest: /etc/letsencrypt/archive/{{ DNS_DOMAIN }}/
      mode: pull
    become: yes
    notify: Restart Nginx

  when: (not local_cert_stat.stat.exists) or (cert_stat.stat.exists and cert_stat.stat.mtime > local_cert_stat.stat.mtime)

- name: Ensure /etc/nginx/ssl directory exists
  file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: '0700'
  become: yes

- name: Generate strong DH parameters
  command:
    cmd: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
    creates: /etc/nginx/ssl/dhparam.pem
  become: yes

- name: Update Nginx configuration using template
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  become: yes
  notify: Restart Nginx

- name: Place Nginx config for services
  template:
    src: "{{ item }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item }}.conf"
  loop:
    - uplocal
    - vaultwarden
    - ask
    - plex
    - jellyfin
    - chat
    - drive
    - file
  become: yes
  notify: Restart Nginx

- name: Symlink Nginx config to sites-enabled for services
  file:
    src: "/etc/nginx/sites-available/{{ item }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item }}.conf"
    state: link
  loop:
    - uplocal
    - vaultwarden
    - ask
    - plex
    - jellyfin
    - chat
    - drive
    - file
  become: yes
  notify: Restart Nginx
  
- name: Ensure default site is not enabled
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: yes
  notify: Restart Nginx 

- name: Ensure Nginx is running and enabled at boot
  service:
    name: nginx
    state: started
    enabled: yes
  become: yes

- name: Set up cron job for cert renewal
  cron:
    name: "Certbot Renewal"
    hour: "2"
    minute: "30"
    job: "certbot renew --quiet --post-hook 'systemctl reload nginx'"
  become: yes

- name: Set up cron job for system package updates
  cron:
    name: "System Package Updates"
    hour: "4"
    minute: "0"
    job: "apt-get update && apt-get upgrade -y"
  become: yes
