version: '3.8'
networks:
  auth-net:
    name: auth-net
  external-net:
    name: external-net
  internal-net:
    name: internal-net
  monitoring-net:
    name: monitoring-net
  traefik-net:
    name: traefik-net
services:
  #############################
  ## TRAEFIK
  #############################
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - '--log.filePath=/logs/traefik.log'
      - '--log.level=DEBUG'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--serversTransport.insecureSkipVerify=true'
      - '--accesslog=true'
      - '--accesslog.filePath=/logs/access.log'
      - '--accesslog.fields.headers.names.Content-Type=keep'
      - '--accesslog.fields.headers.names.Referer=keep'
      - '--accesslog.fields.headers.names.User-Agent=keep'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--providers.file.directory=/rules'
      - '--providers.file.watch=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--entryPoints.websecure.forwardedHeaders.insecure=true'
      - '--entrypoints.websecure.http.tls.certresolver=myresolver'
      - '--entrypoints.websecure.http.tls.domains[0].main=*.${DNS_DOMAIN}'
      - '--entrypoints.websecure.http.tls.domains[0].sans=${DNS_DOMAIN}'
      - '--certificatesresolvers.myresolver.acme.dnschallenge=true'
      - '--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare'
      - '--certificatesresolvers.myresolver.acme.email="${LETSENCRYPT_EMAIL}"'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
      - '--certificatesresolvers.myresolver.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53'
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.testheader.headers.customresponseheaders.X-Frame-Options-Header=SAMEORIGIN"
      # Traefik HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https-mddl@docker"
      - "traefik.http.middlewares.redirect-to-https-mddl.redirectscheme.scheme=https"
      # Traefik Dashboard config
      - "traefik.http.services.traefik-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.api.rule=Host(`traefik.${DNS_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
    environment:
      - CF_DNS_API_TOKEN=${CF_TOKEN}
      - DNS_DOMAIN=${DNS_DOMAIN}
      - SYNOLOGY_HOSTNAME=${SYNOLOGY_HOSTNAME}
      - NUC_HOSTNAME=${NUC_HOSTNAME}
      - LAN_DOMAIN=${LAN_DOMAIN}
      - TZ=${TIME_ZONE}
    volumes:
      - ${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock:ro
      - "${CFG_MOUNT}/traefik-cfg/letsencrypt:/letsencrypt"
      - "${CFG_MOUNT}/logs/traefik:/logs"
      - "./rules:/rules"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - traefik-net
      - auth-net
      - external-net
      - internal-net
      - monitoring-net
  #############################
  ## DOCKERPROXY
  #############################   
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - internal-net
  #############################
  ## WHOAMI
  #############################      
  whoami:
    image: containous/whoami
    container_name: whoami
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.whoami-svc.loadbalancer.server.port=80
      - traefik.http.routers.whoami-rtr.rule=Host(`whoami.${DNS_DOMAIN}`)
      - traefik.http.routers.whoami-rtr.entrypoints=websecure
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## PLEX
  #############################
  plex:
    image: linuxserver/plex
    container_name: plex
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=external-net
      - traefik.http.services.plex-svc.loadbalancer.server.port=32400
      - traefik.http.routers.plex-rtr.rule=Host(`plex.${DNS_DOMAIN}`)
      - traefik.http.routers.plex-rtr.entrypoints=websecure
    ports:
      - "1900:1900/udp"
      - "3005:3005/tcp"
      - "5354:5354/udp"
      - "8324:8324/tcp"
      - "32400:32400/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469/tcp"
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${PLEX_MOUNT_1}
      - ${PLEX_MOUNT_2}
      - ${PLEX_MOUNT_3}
      - ${PLEX_MOUNT_4}
      - ${CFG_MOUNT}/plex-cfg:/config
    devices:
      - /dev/dri:/dev/dri
    networks:
      - internal-net
      - external-net
    depends_on:
      - traefik
  #############################
  ## PORTAINER - ROOT
  #############################
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-rtr.entrypoints=websecure
    volumes:
      - ${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock:ro
      - ${CFG_MOUNT}/portainer-cfg:/data
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## VAULTWARDEN
  #############################     
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    user: ${UID}:${GID}
    environment:
      - "TZ=${TIME_ZONE}"
      - WEBSOCKET_ENABLED=true
      - SHOW_PASSWORD_HINT=false
      - SIGNUPS_ALLOWED=false
    labels:
      - traefik.enable=true
      - traefik.docker.network=external-net
      - traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80
      - traefik.http.routers.vaultwarden-rtr.rule=Host(`vw.${DNS_DOMAIN}`)
      - traefik.http.routers.vaultwarden-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/vaultwarden-cfg/:/data/
    networks:
      - internal-net
      - external-net
    depends_on:
      - traefik
  #############################
  ## ZIGBEE2MQTT
  #############################
  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    container_name: zigbee2mqtt
    restart: unless-stopped
    environment:
      - "TZ=${TIME_ZONE}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.zigbee2mqtt-svc.loadbalancer.server.port=8080
      - traefik.http.routers.zigbee2mqtt-rtr.rule=Host(`zb.${DNS_DOMAIN}`)
      - traefik.http.routers.zigbee2mqtt-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/zigbee2mqtt-cfg/:/app/data
      - /run/udev:/run/udev:ro
    devices:
      - /dev/serial/by-id/${ZIGBEE2MQTT_DEVICEID}:/dev/ttyACM0
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## MOSQUITTO
  #############################
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto
    user: ${UID}:${GID}
    volumes:
      - ${CFG_MOUNT}/mosquitto-cfg/config:/mosquitto/config/
      - ${CFG_MOUNT}/mosquitto-cfg/data:/mosquitto/data/
      - ${CFG_MOUNT}/logs/mosquitto:/mosquitto/log/
    networks:
      - internal-net
    restart: unless-stopped
  #############################
  ## CALIBRE-WEB
  #############################  
  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - "TZ=${TIME_ZONE}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=external-net
      - traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083
      - traefik.http.routers.calibre-web-rtr.rule=Host(`cw.${DNS_DOMAIN}`)
      - traefik.http.routers.calibre-web-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/calibre-web-cfg:/config
      - ${CFG_MOUNT}/calibre-cfg:/books
    networks:
      - external-net
    depends_on:
      - traefik
  #############################
  ## KAVITA
  #############################  
  kavita:
    image: kizaing/kavita:latest
    container_name: kavita
    restart: unless-stopped
    environment:
      - "TZ=${TIME_ZONE}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.kavita-web-svc.loadbalancer.server.port=5000
      - traefik.http.routers.kavita-web-rtr.rule=Host(`kavita.${DNS_DOMAIN}`)
      - traefik.http.routers.kavita-web-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/kavita-cfg:/kavita/config
      - ${CFG_MOUNT}/calibre-cfg:/books
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## AUDIOBOOKSHELF
  #############################    
  audiobookshelf:
    image: advplyr/audiobookshelf
    container_name: audiobookshelf
    restart: unless-stopped
    environment:
      - AUDIOBOOKSHELF_UID=${UID}
      - AUDIOBOOKSHELF_GID=${GID}
      - "TZ=${TIME_ZONE}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=external-net
      - traefik.http.services.audiobookshelf-svc.loadbalancer.server.port=80
      - traefik.http.routers.audiobookshelf-rtr.rule=Host(`ab.${DNS_DOMAIN}`)
      - traefik.http.routers.audiobookshelf-rtr.entrypoints=websecure
    volumes:
      - /nfs/Audiobooks:/media/Audiobooks:ro
      - ${CFG_MOUNT}/audiobookshelf-cfg/config:/config
      - ${CFG_MOUNT}/audiobookshelf-cfg/metadata:/metadata
    networks:
      - external-net
    depends_on:
      - traefik
  #############################
  ## CHANGEDETECTION
  #############################  
  changedetection:
    image: dgtlmoon/changedetection.io
    container_name: changedetection
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.changedetection-svc.loadbalancer.server.port=5000
      - traefik.http.routers.changedetection-rtr.rule=Host(`cd.${DNS_DOMAIN}`)
      - traefik.http.routers.changedetection-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/changedetection-cfg:/datastore
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## LINKDING
  #############################  
  linkding:
    container_name: linkding
    image: sissbruecker/linkding:latest
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.linkding-svc.loadbalancer.server.port=9090
      - traefik.http.routers.linkding-rtr.rule=Host(`links.${DNS_DOMAIN}`)
      - traefik.http.routers.linkding-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/linkding-cfg:/etc/linkding/data
    environment:
      - LD_HOST_PORT=9090
      - LD_HOST_DATA_DIR=./data
      # Option to disable background tasks
      - LD_DISABLE_BACKGROUND_TASKS=False
      # Option to disable URL validation for bookmarks completely
      - LD_DISABLE_URL_VALIDATION=False
    restart: unless-stopped
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## CLOUDFLARE - DDNS
  #############################  
  cloudflare:
    image: oznu/cloudflare-ddns:latest
    restart: unless-stopped
    container_name: cloudflare
    labels:
      - traefik.enable=false
    environment:
      - "API_KEY=${CF_TOKEN}"
      - "ZONE=${DNS_DOMAIN}"
      - "SUBDOMAIN=${SUBDOMAIN}"
      - "DNS_SERVER=1.0.0.1"
      - "PROXIED=TRUE"
      - "CRON=*/35 * * * *"
    dns: 1.1.1.1
  #############################
  ## HOMEPAGE
  #############################    
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.homepage-svc.loadbalancer.server.port=3000
      - traefik.http.routers.homepage-rtr.rule=Host(`home.${DNS_DOMAIN}`)
      - traefik.http.routers.homepage-rtr.entrypoints=websecure
    environment:
      - UID=${UID}
      - GID=${GID}
    volumes:
      - ${CFG_MOUNT}/homepage-cfg:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## SPEEDTEST-EXPORTER
  #############################       
  speedtest:
    image: miguelndecarvalho/speedtest-exporter
    container_name: speedtest
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=monitoring-net
      - traefik.http.services.speedtest-exporter-svc.loadbalancer.server.port=9798
      - traefik.http.routers.speedtest-exporter-rtr.rule=Host(`speedtest.${DNS_DOMAIN}`)
      - traefik.http.routers.speedtest-exporter-rtr.entrypoints=websecure
    networks:
      - monitoring-net
    depends_on:
      - traefik
  #############################
  ## NODERED
  #############################     
  nodered:
    image: nodered/node-red:2.2.2-12
    container_name: nodered
    restart: unless-stopped
    environment:
      - "TZ=${TIME_ZONE}"
    volumes:
      - ${CFG_MOUNT}/node-red-cfg:/data
    network_mode: host
    depends_on:
      - traefik
  #############################
  ## NETDAEMON
  #############################   
  netdaemon:
    image: netdaemon/netdaemon
    container_name: netdaemon
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.netdaemon-svc.loadbalancer.server.port=1337
      - traefik.http.routers.netdaemon-rtr.rule=Host(`netdaemon.${DNS_DOMAIN}`)
      - traefik.http.routers.netdaemon-rtr.entrypoints=websecure
    environment:
      - HOMEASSISTANT__HOST=home-assistant
      - HOMEASSISTANT__PORT=8123
      - HOMEASSISTANT__TOKEN=${HA_TOKEN}
      - LOGGING__MINIMUMLEVEL=info
      - TZ='${TIME_ZONE}'
    volumes:
      - ${CFG_MOUNT}/netdaemon-cfg:/data
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## HOME-ASSISTANT
  #############################      
  home-assistant-db:
    image: linuxserver/mariadb:latest
    container_name: home-assistant-db
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - "TZ=${TIME_ZONE}"
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - MYSQL_DATABASE=hadb
      - MYSQL_USER=ha
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
      - MYSQL_LOG_CONSOLE=true
    volumes:
      - ${CFG_MOUNT}/home-assistant-db:/config
    ports:
      - 3306:3306
    networks:
      - internal-net
    depends_on:
      - traefik
  home-assistant:
    image: homeassistant/home-assistant:latest
    container_name: home-assistant
    restart: unless-stopped
    links:
      - home-assistant-db:mariadb
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.home-assistant-svc.loadbalancer.server.port=8123
      - traefik.http.routers.home-assistant-rtr.rule=Host(`ha.${DNS_DOMAIN}`)
      - traefik.http.routers.home-assistant-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - "TZ=${TIME_ZONE}"
    volumes:
      - ${CFG_MOUNT}/home-assistant-cfg:/config
      - /run/dbus:/run/dbus:ro
    depends_on:
      - home-assistant-db
      - traefik
    networks:
      - internal-net
      - external-net
  #############################
  ## OVERSEERR
  #############################    
  overseerr:
    image: linuxserver/overseerr:latest
    hostname: overseerr
    container_name: overseerr
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.overseerr-svc.loadbalancer.server.port=5055
      - traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.${DNS_DOMAIN}`)
      - traefik.http.routers.overseerr-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/overseerr-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## DOKUWIKI
  #############################    
  dokuwiki:
    image: linuxserver/dokuwiki
    container_name: dokuwiki
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.dokuwiki-svc.loadbalancer.server.port=80
      - traefik.http.routers.dokuwiki-rtr.rule=Host(`dok.${DNS_DOMAIN}`)
      - traefik.http.routers.dokuwiki-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/dokuwiki-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## DUPLICACY
  ## TODO: mount drives from synology
  #############################  
  duplicacy:
    image: saspus/duplicacy-web:latest
    hostname: duplicacy
    container_name: duplicacy
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.duplicacy-svc.loadbalancer.server.port=3875
      - traefik.http.routers.duplicacy-rtr.rule=Host(`duplicacy.${DNS_DOMAIN}`)
      - traefik.http.routers.duplicacy-rtr.entrypoints=websecure
    environment:
      - USR_ID=${UID}
      - GRP_ID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/duplicacy-cfg:/config
      - ${CFG_MOUNT}/logs/duplicacy:/logs
      - ${CFG_MOUNT}/duplicacy-cfg/cache:/cache
      - /nfs/backup:/backup:ro
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## uptime-kuma
  #############################   
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001
      - traefik.http.routers.uptime-kuma-rtr.rule=Host(`uptime.${DNS_DOMAIN}`)
      - traefik.http.routers.uptime-kuma-rtr.entrypoints=websecure
    volumes:
      - ${CFG_MOUNT}/uptime-kuma-cfg:/app/data
    networks:
      - internal-net
      - external-net
    depends_on:
      - traefik
  #############################
  ## JELLYFIN
  #############################      
  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096
      - traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin.${DNS_DOMAIN}`)
      - traefik.http.routers.jellyfin-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/jellyfin-cfg:/config
      - ${JELLYFIN_MOUNT_1}
      - ${JELLYFIN_MOUNT_2}
      - ${JELLYFIN_MOUNT_3}
      - ${JELLYFIN_MOUNT_4}
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## Sonarr
  ############################# 
  sonarr:
    image: linuxserver/sonarr:latest
    hostname: sonarr
    container_name: sonarr
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.sonarr-svc.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.${DNS_DOMAIN}`)
      - traefik.http.routers.sonarr-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/sonarr-cfg:/config
      - ${SONARR_MOUNT}
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## Radarr
  ############################# 
  radarr:
    image: linuxserver/radarr:latest
    hostname: radarr
    container_name: radarr
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.radarr-svc.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-rtr.rule=Host(`radarr.${DNS_DOMAIN}`)
      - traefik.http.routers.radarr-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/radarr-cfg:/config
      - ${RADARR_MOUNT}
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## Prowlarr
  ############################# 
  prowlarr:
    image: linuxserver/prowlarr:latest
    hostname: prowlarr
    container_name: prowlarr
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.${DNS_DOMAIN}`)
      - traefik.http.routers.prowlarr-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/prowlarr-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## FreshRSS 
  #############################  
  freshrss:
    image: linuxserver/freshrss
    hostname: freshrss
    container_name: freshrss
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.freshrss-svc.loadbalancer.server.port=80
      - traefik.http.routers.freshrss-rtr.rule=Host(`freshrss.${DNS_DOMAIN}`)
      - traefik.http.routers.freshrss-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/freshrss-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## GITEA 
  ############################# 
  gitea:
    image: gitea/gitea:latest
    hostname: gitea
    container_name: gitea
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.gitea-svc.loadbalancer.server.port=3000
      - traefik.http.routers.gitea-rtr.rule=Host(`gitea.${DNS_DOMAIN}`)
      - traefik.http.routers.gitea-rtr.entrypoints=websecure
    environment:
      - USER_UID=${UID}
      - USER_GID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/gitea-cfg:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal-net
    depends_on:
      - traefik
  #############################
  ## WHATSUPDOCKER 
  ############################# 
  whatsupdocker:
    image: fmartinou/whats-up-docker
    hostname: whatsupdocker
    container_name: whatsupdocker
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.whatsupdocker-svc.loadbalancer.server.port=3000
      - traefik.http.routers.whatsupdocker-rtr.rule=Host(`wud.${DNS_DOMAIN}`)
      - traefik.http.routers.whatsupdocker-rtr.entrypoints=websecure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CFG_MOUNT}/whatsupdocker-cfg:/store
    networks:
      - internal-net
    depends_on:
      - traefik
    #############################
    ## BABYBUDDY
    #############################  
  babybuddy:
    image: lscr.io/linuxserver/babybuddy
    hostname: babybuddy
    container_name: babybuddy
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.babybuddy-svc.loadbalancer.server.port=8000
      - traefik.http.routers.babybuddy-rtr.rule=Host(`babybuddy.${DNS_DOMAIN}`)
      - traefik.http.routers.babybuddy-rtr.entrypoints=websecure
    environment:
      - USER_UID=${UID}
      - USER_GID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/babybuddy-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
    #############################
    ## VIKUNJA
    #############################
  vikunja-api:
    image: vikunja/api
    hostname: vikunja-api
    container_name: vikunja-api
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.vikunja-api-svc.loadbalancer.server.port=3456
      - traefik.http.routers.vikunja-api-rtr.rule=Host(`vikunjaapi.${DNS_DOMAIN}`) && (PathPrefix(`/api/v1`) || PathPrefix(`/dav/`) || PathPrefix(`/.well-known/`))
      - traefik.http.routers.vikunja-api-rtr.entrypoints=websecure
    environment:
      - VIKUNJA_DATABASE_HOST=vikunja-db
      - VIKUNJA_DATABASE_PASSWORD=${VIKUNJA_DATABASE_PASSWORD}
      - VIKUNJA_DATABASE_TYPE=mysql
      - VIKUNJA_DATABASE_USER=vikunja
      - VIKUNJA_DATABASE_DATABASE=vikunja
      - VIKUNJA_SERVICE_JWTSECRET=${VIKUNJA_SERVICE_JWTSECRET}
      - VIKUNJA_SERVICE_FRONTENDURL=https://vikunja.${DNS_DOMAIN}/
    volumes:
      - ${CFG_MOUNT}/vikunja-api-cfg:/app/vikunja/files
    networks:
      - internal-net
    depends_on:
      - traefik
      - vikunja-db
  vikunja-frontend:
    hostname: vikunja-frontend
    container_name: vikunja-frontend
    image: vikunja/frontend
    labels:
      - "traefik.enable=true"
      - traefik.http.services.vikunja-frontend-svc.loadbalancer.server.port=80
      - "traefik.http.routers.vikunja-frontend-rtr.rule=Host(`vikunja.${DNS_DOMAIN}`)"
      - "traefik.http.routers.vikunja-frontend-rtr.entrypoints=websecure"
    environment:
      - VIKUNJA_API_URL=https://vikunjaapi.${DNS_DOMAIN}/api/v1
    networks:
      - internal-net
    restart: unless-stopped
    depends_on:
      - traefik
  vikunja-db:
    hostname: vikunja-db
    container_name: vikunja-db
    image: mariadb:10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=1000
    environment:
      MYSQL_ROOT_PASSWORD: ${VIKUNJA_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: vikunja
      MYSQL_PASSWORD: ${VIKUNJA_DATABASE_PASSWORD}
      MYSQL_DATABASE: vikunja
    volumes:
      - ${CFG_MOUNT}/vikunja-db-cfg:/var/lib/mysql
    networks:
      - internal-net
    restart: unless-stopped
    #############################
    ## PROJECTSEND
    #############################  
  projectsend:
    image: linuxserver/projectsend
    hostname: projectsend
    container_name: projectsend
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.projectsend-svc.loadbalancer.server.port=80
      - traefik.http.routers.projectsend-rtr.rule=Host(`send.${DNS_DOMAIN}`)
      - traefik.http.routers.projectsend-rtr.entrypoints=websecure
    environment:
      - USER_UID=${UID}
      - USER_GID=${GID}
      - TZ=${TIME_ZONE}
    volumes:
      - ${CFG_MOUNT}/projectsend-cfg/config:/config
      - ${CFG_MOUNT}/projectsend-cfg/data:/data
    networks:
      - internal-net
    depends_on:
      - traefik
  projectsend-db:
    hostname: projectsend-db
    container_name: projectsend-db
    image: mariadb:10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=1000
    environment:
      MYSQL_ROOT_PASSWORD: ${PROJECTSEND_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: projectsend
      MYSQL_PASSWORD: ${PROJECTSEND_DATABASE_PASSWORD}
      MYSQL_DATABASE: projectsend
    volumes:
      - ${CFG_MOUNT}/projectsend-db-cfg:/var/lib/mysql
    networks:
      - internal-net
    restart: unless-stopped
    #############################
    ## SNIPE-IT
    #############################      
  snipeit:
    image: linuxserver/snipe-it
    hostname: snipeit
    container_name: snipeit
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal-net
      - traefik.http.services.snipeit-svc.loadbalancer.server.port=80
      - traefik.http.routers.snipeit-rtr.rule=Host(`snipeit.${DNS_DOMAIN}`)
      - traefik.http.routers.snipeit-rtr.entrypoints=websecure
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL}
      - APP_TIMEZONE=${APP_TIMEZONE}
      - APP_LOCALE=${APP_LOCALE}
      - MAX_RESULTS=${MAX_RESULTS}
      - NGINX_APP_URL=snipeit.${DNS_DOMAIN}
      - DB_CONNECTION=mysql
      - MYSQL_PORT_3306_TCP_ADDR=snipeit-db
      - MYSQL_PORT_3306_TCP_PORT=3306
      - MYSQL_DATABASE=snipeitdb
      - MYSQL_USER=snipeit
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - DB_PREFIX=null
      - DB_DUMP_PATH='/usr/bin'
      - DB_CHARSET=utf8mb4
      - DB_COLLATION=utf8mb4_unicode_ci
      - APP_TRUSTED_PROXIES=${APP_TRUSTED_PROXIES}
      - SECURE_COOKIES=true
      - IMAGE_LIB=gd
      - PRIVATE_FILESYSTEM_DISK=local
      - PUBLIC_FILESYSTEM_DISK=local_public
      - MAIL_DRIVER=${MAIL_DRIVER}
      - MAIL_PORT_587_TCP_ADDR=${MAIL_HOST}
      - MAIL_PORT_587_TCP_PORT=${MAIL_PORT}
      - MAIL_ENV_USERNAME=${MAIL_USERNAME}
      - MAIL_ENV_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENV_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_ENV_FROM_ADDR=${MAIL_FROM_ADDR}
      - MAIL_ENV_FROM_NAME=${MAIL_FROM_NAME}
      - MAIL_REPLYTO_ADDR=${MAIL_REPLYTO_ADDR}
      - MAIL_REPLYTO_NAME=${MAIL_REPLYTO_NAME}
      - MAIL_AUTO_EMBED_METHOD=${MAIL_AUTO_EMBED_METHOD}
    volumes:
      - ${CFG_MOUNT}/snipeit-cfg:/config
    networks:
      - internal-net
    depends_on:
      - traefik
      - snipeit-db
  snipeit-db:
    image: linuxserver/mariadb:latest
    container_name: snipeit-db
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - "TZ=${TIME_ZONE}"
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - MYSQL_DATABASE=snipeitdb
      - MYSQL_USER=snipeit
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
    volumes:
      - ${CFG_MOUNT}/snipeit-db:/config
    networks:
      - internal-net
    depends_on:
      - traefik
